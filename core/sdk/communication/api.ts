/* tslint:disable */
/* eslint-disable */
/**
 * Communication Docs
 * Communication endpoints...
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddDiscussionCommentDto
 */
export interface AddDiscussionCommentDto {
    /**
     * 
     * @type {string}
     * @memberof AddDiscussionCommentDto
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface ChatConversationInfo
 */
export interface ChatConversationInfo {
    /**
     * 
     * @type {string}
     * @memberof ChatConversationInfo
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ChatConversationInfo
     */
    'unreadMessagesCount': number;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationInfo
     */
    'lastConversationMessage': string;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationInfo
     */
    'lastConversationTimestamp': string;
    /**
     * 
     * @type {ChatConversationUserInfo}
     * @memberof ChatConversationInfo
     */
    'user1': ChatConversationUserInfo;
    /**
     * 
     * @type {ChatConversationUserInfo}
     * @memberof ChatConversationInfo
     */
    'user2': ChatConversationUserInfo;
}
/**
 * 
 * @export
 * @interface ChatConversationUserInfo
 */
export interface ChatConversationUserInfo {
    /**
     * 
     * @type {string}
     * @memberof ChatConversationUserInfo
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationUserInfo
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationUserInfo
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationUserInfo
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationUserInfo
     */
    'avatar': string;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationUserInfo
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ChatConversationsResponse
 */
export interface ChatConversationsResponse {
    /**
     * 
     * @type {Array<ChatConversationInfo>}
     * @memberof ChatConversationsResponse
     */
    'conversations': Array<ChatConversationInfo>;
    /**
     * 
     * @type {number}
     * @memberof ChatConversationsResponse
     */
    'totalPages': number;
    /**
     * 
     * @type {boolean}
     * @memberof ChatConversationsResponse
     */
    'hasNextPage': boolean;
}
/**
 * 
 * @export
 * @interface ChatMessageInfo
 */
export interface ChatMessageInfo {
    /**
     * 
     * @type {string}
     * @memberof ChatMessageInfo
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageInfo
     */
    'content': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ChatMessageInfo
     */
    'isRead': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageInfo
     */
    'timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageInfo
     */
    'sender': string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageInfo
     */
    'recipient': string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageInfo
     */
    'conversation': string;
    /**
     * 
     * @type {boolean}
     * @memberof ChatMessageInfo
     */
    'hasCTA': boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageInfo
     */
    'ctaType': string;
}
/**
 * 
 * @export
 * @interface CommentAuthorInfo
 */
export interface CommentAuthorInfo {
    /**
     * 
     * @type {string}
     * @memberof CommentAuthorInfo
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CommentAuthorInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CommentAuthorInfo
     */
    'avatar': string;
    /**
     * 
     * @type {string}
     * @memberof CommentAuthorInfo
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface CreateDiscussionDto
 */
export interface CreateDiscussionDto {
    /**
     * Content of the discussion
     * @type {string}
     * @memberof CreateDiscussionDto
     */
    'content': string;
    /**
     * Category of the discussion
     * @type {string}
     * @memberof CreateDiscussionDto
     */
    'category': string;
    /**
     * Media url of the discussion(image, video, etc.)
     * @type {string}
     * @memberof CreateDiscussionDto
     */
    'mediaUrl': string;
}
/**
 * 
 * @export
 * @interface DiscussionAuthorInfo
 */
export interface DiscussionAuthorInfo {
    /**
     * 
     * @type {string}
     * @memberof DiscussionAuthorInfo
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionAuthorInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionAuthorInfo
     */
    'avatar': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionAuthorInfo
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface DiscussionCommentInfo
 */
export interface DiscussionCommentInfo {
    /**
     * 
     * @type {string}
     * @memberof DiscussionCommentInfo
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionCommentInfo
     */
    'content': string;
    /**
     * 
     * @type {CommentAuthorInfo}
     * @memberof DiscussionCommentInfo
     */
    'author': CommentAuthorInfo;
    /**
     * 
     * @type {string}
     * @memberof DiscussionCommentInfo
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface DiscussionCommentsResponse
 */
export interface DiscussionCommentsResponse {
    /**
     * 
     * @type {Array<DiscussionCommentInfo>}
     * @memberof DiscussionCommentsResponse
     */
    'comments': Array<DiscussionCommentInfo>;
    /**
     * 
     * @type {number}
     * @memberof DiscussionCommentsResponse
     */
    'totalPages': number;
    /**
     * 
     * @type {boolean}
     * @memberof DiscussionCommentsResponse
     */
    'hasNextPage': boolean;
}
/**
 * 
 * @export
 * @interface DiscussionInfo
 */
export interface DiscussionInfo {
    /**
     * 
     * @type {string}
     * @memberof DiscussionInfo
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionInfo
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionInfo
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionInfo
     */
    'mediaType': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionInfo
     */
    'media': string;
    /**
     * 
     * @type {DiscussionAuthorInfo}
     * @memberof DiscussionInfo
     */
    'author': DiscussionAuthorInfo;
    /**
     * 
     * @type {string}
     * @memberof DiscussionInfo
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionInfo
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof DiscussionInfo
     */
    'reactions': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof DiscussionInfo
     */
    'comments': number;
}
/**
 * 
 * @export
 * @interface DiscussionReactionAuthor
 */
export interface DiscussionReactionAuthor {
    /**
     * 
     * @type {string}
     * @memberof DiscussionReactionAuthor
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionReactionAuthor
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionReactionAuthor
     */
    'avatar': string;
    /**
     * 
     * @type {string}
     * @memberof DiscussionReactionAuthor
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface DiscussionReactionInfo
 */
export interface DiscussionReactionInfo {
    /**
     * 
     * @type {string}
     * @memberof DiscussionReactionInfo
     */
    'id': string;
    /**
     * 
     * @type {DiscussionReactionAuthor}
     * @memberof DiscussionReactionInfo
     */
    'author': DiscussionReactionAuthor;
    /**
     * 
     * @type {string}
     * @memberof DiscussionReactionInfo
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface DiscussionsResponse
 */
export interface DiscussionsResponse {
    /**
     * 
     * @type {Array<DiscussionInfo>}
     * @memberof DiscussionsResponse
     */
    'discussions': Array<DiscussionInfo>;
    /**
     * 
     * @type {number}
     * @memberof DiscussionsResponse
     */
    'totalPages': number;
    /**
     * 
     * @type {boolean}
     * @memberof DiscussionsResponse
     */
    'hasNextPage': boolean;
}
/**
 * 
 * @export
 * @interface TestimonialInfo
 */
export interface TestimonialInfo {
    /**
     * The ID of the testimonial
     * @type {string}
     * @memberof TestimonialInfo
     */
    'id': string;
    /**
     * The author of the testimonial
     * @type {string}
     * @memberof TestimonialInfo
     */
    'author': string;
    /**
     * The avatar URL of the testimonial
     * @type {string}
     * @memberof TestimonialInfo
     */
    'avatarUrl': string;
    /**
     * The testimonial
     * @type {string}
     * @memberof TestimonialInfo
     */
    'testimonial': string;
    /**
     * The created at date of the testimonial
     * @type {string}
     * @memberof TestimonialInfo
     */
    'createdAt': string;
}

/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} receiverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerCreateChatConversation: async (receiverId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'receiverId' is not null or undefined
            assertParamExists('chatControllerCreateChatConversation', 'receiverId', receiverId)
            const localVarPath = `/v1/communication/chat/conversations/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (receiverId !== undefined) {
                localVarQueryParameter['receiverId'] = receiverId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerFetchAdminChatConversation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/communication/chat/conversation/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} receiverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerFetchChatConversation: async (receiverId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'receiverId' is not null or undefined
            assertParamExists('chatControllerFetchChatConversation', 'receiverId', receiverId)
            const localVarPath = `/v1/communication/chat/conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (receiverId !== undefined) {
                localVarQueryParameter['receiverId'] = receiverId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerFetchChatConversationMessages: async (conversationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('chatControllerFetchChatConversationMessages', 'conversationId', conversationId)
            const localVarPath = `/v1/communication/chat/conversation/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (conversationId !== undefined) {
                localVarQueryParameter['conversationId'] = conversationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerFetchChatConversations: async (page: number, pageSize: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('chatControllerFetchChatConversations', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('chatControllerFetchChatConversations', 'pageSize', pageSize)
            const localVarPath = `/v1/communication/chat/conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerReadChatConversationMessages: async (conversationId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('chatControllerReadChatConversationMessages', 'conversationId', conversationId)
            const localVarPath = `/v1/communication/chat/conversation/messages/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (conversationId !== undefined) {
                localVarQueryParameter['conversationId'] = conversationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} receiverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatControllerCreateChatConversation(receiverId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatConversationInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatControllerCreateChatConversation(receiverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatControllerCreateChatConversation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatControllerFetchAdminChatConversation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatConversationInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatControllerFetchAdminChatConversation(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatControllerFetchAdminChatConversation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} receiverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatControllerFetchChatConversation(receiverId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatConversationInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatControllerFetchChatConversation(receiverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatControllerFetchChatConversation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatControllerFetchChatConversationMessages(conversationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChatMessageInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatControllerFetchChatConversationMessages(conversationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatControllerFetchChatConversationMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatControllerFetchChatConversations(page: number, pageSize: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatConversationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatControllerFetchChatConversations(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatControllerFetchChatConversations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatControllerReadChatConversationMessages(conversationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatControllerReadChatConversationMessages(conversationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatControllerReadChatConversationMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * 
         * @param {number} receiverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerCreateChatConversation(receiverId: number, options?: RawAxiosRequestConfig): AxiosPromise<ChatConversationInfo> {
            return localVarFp.chatControllerCreateChatConversation(receiverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerFetchAdminChatConversation(options?: RawAxiosRequestConfig): AxiosPromise<ChatConversationInfo> {
            return localVarFp.chatControllerFetchAdminChatConversation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} receiverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerFetchChatConversation(receiverId: number, options?: RawAxiosRequestConfig): AxiosPromise<ChatConversationInfo> {
            return localVarFp.chatControllerFetchChatConversation(receiverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerFetchChatConversationMessages(conversationId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ChatMessageInfo>> {
            return localVarFp.chatControllerFetchChatConversationMessages(conversationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerFetchChatConversations(page: number, pageSize: number, options?: RawAxiosRequestConfig): AxiosPromise<ChatConversationsResponse> {
            return localVarFp.chatControllerFetchChatConversations(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatControllerReadChatConversationMessages(conversationId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.chatControllerReadChatConversationMessages(conversationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * 
     * @param {number} receiverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatControllerCreateChatConversation(receiverId: number, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatControllerCreateChatConversation(receiverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatControllerFetchAdminChatConversation(options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatControllerFetchAdminChatConversation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} receiverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatControllerFetchChatConversation(receiverId: number, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatControllerFetchChatConversation(receiverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatControllerFetchChatConversationMessages(conversationId: number, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatControllerFetchChatConversationMessages(conversationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} pageSize 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatControllerFetchChatConversations(page: number, pageSize: number, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatControllerFetchChatConversations(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatControllerReadChatConversationMessages(conversationId: number, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatControllerReadChatConversationMessages(conversationId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DiscussionsApi - axios parameter creator
 * @export
 */
export const DiscussionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} discussionId 
         * @param {AddDiscussionCommentDto} addDiscussionCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerAddDiscussionComment: async (discussionId: number, addDiscussionCommentDto: AddDiscussionCommentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discussionId' is not null or undefined
            assertParamExists('discussionControllerAddDiscussionComment', 'discussionId', discussionId)
            // verify required parameter 'addDiscussionCommentDto' is not null or undefined
            assertParamExists('discussionControllerAddDiscussionComment', 'addDiscussionCommentDto', addDiscussionCommentDto)
            const localVarPath = `/v1/communication/discussions/add-comment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (discussionId !== undefined) {
                localVarQueryParameter['discussionId'] = discussionId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addDiscussionCommentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} discussionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerAddDiscussionReaction: async (discussionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discussionId' is not null or undefined
            assertParamExists('discussionControllerAddDiscussionReaction', 'discussionId', discussionId)
            const localVarPath = `/v1/communication/discussions/add-reaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (discussionId !== undefined) {
                localVarQueryParameter['discussionId'] = discussionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateDiscussionDto} createDiscussionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerCreateDiscussion: async (createDiscussionDto: CreateDiscussionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDiscussionDto' is not null or undefined
            assertParamExists('discussionControllerCreateDiscussion', 'createDiscussionDto', createDiscussionDto)
            const localVarPath = `/v1/communication/discussions/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDiscussionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} discussionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerFetchDiscussionComments: async (discussionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discussionId' is not null or undefined
            assertParamExists('discussionControllerFetchDiscussionComments', 'discussionId', discussionId)
            const localVarPath = `/v1/communication/discussions/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (discussionId !== undefined) {
                localVarQueryParameter['discussionId'] = discussionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} discussionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerFetchDiscussionReactions: async (discussionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'discussionId' is not null or undefined
            assertParamExists('discussionControllerFetchDiscussionReactions', 'discussionId', discussionId)
            const localVarPath = `/v1/communication/discussions/reactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (discussionId !== undefined) {
                localVarQueryParameter['discussionId'] = discussionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerFetchDiscussionsByCategory: async (page: number, pageSize: number, category: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('discussionControllerFetchDiscussionsByCategory', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('discussionControllerFetchDiscussionsByCategory', 'pageSize', pageSize)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('discussionControllerFetchDiscussionsByCategory', 'category', category)
            const localVarPath = `/v1/communication/discussions/feed/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerFetchDiscussionsFeed: async (page: number, pageSize: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('discussionControllerFetchDiscussionsFeed', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('discussionControllerFetchDiscussionsFeed', 'pageSize', pageSize)
            const localVarPath = `/v1/communication/discussions/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} query 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerSearchDiscussions: async (page: number, pageSize: number, query: string, category: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('discussionControllerSearchDiscussions', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('discussionControllerSearchDiscussions', 'pageSize', pageSize)
            // verify required parameter 'query' is not null or undefined
            assertParamExists('discussionControllerSearchDiscussions', 'query', query)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('discussionControllerSearchDiscussions', 'category', category)
            const localVarPath = `/v1/communication/discussions/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiscussionsApi - functional programming interface
 * @export
 */
export const DiscussionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DiscussionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} discussionId 
         * @param {AddDiscussionCommentDto} addDiscussionCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discussionControllerAddDiscussionComment(discussionId: number, addDiscussionCommentDto: AddDiscussionCommentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscussionCommentInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discussionControllerAddDiscussionComment(discussionId, addDiscussionCommentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiscussionsApi.discussionControllerAddDiscussionComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} discussionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discussionControllerAddDiscussionReaction(discussionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscussionInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discussionControllerAddDiscussionReaction(discussionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiscussionsApi.discussionControllerAddDiscussionReaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateDiscussionDto} createDiscussionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discussionControllerCreateDiscussion(createDiscussionDto: CreateDiscussionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscussionInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discussionControllerCreateDiscussion(createDiscussionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiscussionsApi.discussionControllerCreateDiscussion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} discussionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discussionControllerFetchDiscussionComments(discussionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscussionCommentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discussionControllerFetchDiscussionComments(discussionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiscussionsApi.discussionControllerFetchDiscussionComments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} discussionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discussionControllerFetchDiscussionReactions(discussionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DiscussionReactionInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discussionControllerFetchDiscussionReactions(discussionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiscussionsApi.discussionControllerFetchDiscussionReactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discussionControllerFetchDiscussionsByCategory(page: number, pageSize: number, category: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscussionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discussionControllerFetchDiscussionsByCategory(page, pageSize, category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiscussionsApi.discussionControllerFetchDiscussionsByCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discussionControllerFetchDiscussionsFeed(page: number, pageSize: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscussionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discussionControllerFetchDiscussionsFeed(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiscussionsApi.discussionControllerFetchDiscussionsFeed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} query 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discussionControllerSearchDiscussions(page: number, pageSize: number, query: string, category: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscussionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discussionControllerSearchDiscussions(page, pageSize, query, category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiscussionsApi.discussionControllerSearchDiscussions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DiscussionsApi - factory interface
 * @export
 */
export const DiscussionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DiscussionsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} discussionId 
         * @param {AddDiscussionCommentDto} addDiscussionCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerAddDiscussionComment(discussionId: number, addDiscussionCommentDto: AddDiscussionCommentDto, options?: RawAxiosRequestConfig): AxiosPromise<DiscussionCommentInfo> {
            return localVarFp.discussionControllerAddDiscussionComment(discussionId, addDiscussionCommentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} discussionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerAddDiscussionReaction(discussionId: number, options?: RawAxiosRequestConfig): AxiosPromise<DiscussionInfo> {
            return localVarFp.discussionControllerAddDiscussionReaction(discussionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateDiscussionDto} createDiscussionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerCreateDiscussion(createDiscussionDto: CreateDiscussionDto, options?: RawAxiosRequestConfig): AxiosPromise<DiscussionInfo> {
            return localVarFp.discussionControllerCreateDiscussion(createDiscussionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} discussionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerFetchDiscussionComments(discussionId: number, options?: RawAxiosRequestConfig): AxiosPromise<DiscussionCommentsResponse> {
            return localVarFp.discussionControllerFetchDiscussionComments(discussionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} discussionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerFetchDiscussionReactions(discussionId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<DiscussionReactionInfo>> {
            return localVarFp.discussionControllerFetchDiscussionReactions(discussionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerFetchDiscussionsByCategory(page: number, pageSize: number, category: string, options?: RawAxiosRequestConfig): AxiosPromise<DiscussionsResponse> {
            return localVarFp.discussionControllerFetchDiscussionsByCategory(page, pageSize, category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerFetchDiscussionsFeed(page: number, pageSize: number, options?: RawAxiosRequestConfig): AxiosPromise<DiscussionsResponse> {
            return localVarFp.discussionControllerFetchDiscussionsFeed(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} query 
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discussionControllerSearchDiscussions(page: number, pageSize: number, query: string, category: string, options?: RawAxiosRequestConfig): AxiosPromise<DiscussionsResponse> {
            return localVarFp.discussionControllerSearchDiscussions(page, pageSize, query, category, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DiscussionsApi - object-oriented interface
 * @export
 * @class DiscussionsApi
 * @extends {BaseAPI}
 */
export class DiscussionsApi extends BaseAPI {
    /**
     * 
     * @param {number} discussionId 
     * @param {AddDiscussionCommentDto} addDiscussionCommentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscussionsApi
     */
    public discussionControllerAddDiscussionComment(discussionId: number, addDiscussionCommentDto: AddDiscussionCommentDto, options?: RawAxiosRequestConfig) {
        return DiscussionsApiFp(this.configuration).discussionControllerAddDiscussionComment(discussionId, addDiscussionCommentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} discussionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscussionsApi
     */
    public discussionControllerAddDiscussionReaction(discussionId: number, options?: RawAxiosRequestConfig) {
        return DiscussionsApiFp(this.configuration).discussionControllerAddDiscussionReaction(discussionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateDiscussionDto} createDiscussionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscussionsApi
     */
    public discussionControllerCreateDiscussion(createDiscussionDto: CreateDiscussionDto, options?: RawAxiosRequestConfig) {
        return DiscussionsApiFp(this.configuration).discussionControllerCreateDiscussion(createDiscussionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} discussionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscussionsApi
     */
    public discussionControllerFetchDiscussionComments(discussionId: number, options?: RawAxiosRequestConfig) {
        return DiscussionsApiFp(this.configuration).discussionControllerFetchDiscussionComments(discussionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} discussionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscussionsApi
     */
    public discussionControllerFetchDiscussionReactions(discussionId: number, options?: RawAxiosRequestConfig) {
        return DiscussionsApiFp(this.configuration).discussionControllerFetchDiscussionReactions(discussionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} pageSize 
     * @param {string} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscussionsApi
     */
    public discussionControllerFetchDiscussionsByCategory(page: number, pageSize: number, category: string, options?: RawAxiosRequestConfig) {
        return DiscussionsApiFp(this.configuration).discussionControllerFetchDiscussionsByCategory(page, pageSize, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} pageSize 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscussionsApi
     */
    public discussionControllerFetchDiscussionsFeed(page: number, pageSize: number, options?: RawAxiosRequestConfig) {
        return DiscussionsApiFp(this.configuration).discussionControllerFetchDiscussionsFeed(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} pageSize 
     * @param {string} query 
     * @param {string} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscussionsApi
     */
    public discussionControllerSearchDiscussions(page: number, pageSize: number, query: string, category: string, options?: RawAxiosRequestConfig) {
        return DiscussionsApiFp(this.configuration).discussionControllerSearchDiscussions(page, pageSize, query, category, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestimonialsApi - axios parameter creator
 * @export
 */
export const TestimonialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testimonialControllerFetchTestimonialsFeed: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/communication/testimonials/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestimonialsApi - functional programming interface
 * @export
 */
export const TestimonialsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestimonialsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testimonialControllerFetchTestimonialsFeed(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TestimonialInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testimonialControllerFetchTestimonialsFeed(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonialsApi.testimonialControllerFetchTestimonialsFeed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestimonialsApi - factory interface
 * @export
 */
export const TestimonialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestimonialsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testimonialControllerFetchTestimonialsFeed(options?: RawAxiosRequestConfig): AxiosPromise<Array<TestimonialInfo>> {
            return localVarFp.testimonialControllerFetchTestimonialsFeed(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestimonialsApi - object-oriented interface
 * @export
 * @class TestimonialsApi
 * @extends {BaseAPI}
 */
export class TestimonialsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialsApi
     */
    public testimonialControllerFetchTestimonialsFeed(options?: RawAxiosRequestConfig) {
        return TestimonialsApiFp(this.configuration).testimonialControllerFetchTestimonialsFeed(options).then((request) => request(this.axios, this.basePath));
    }
}



